# docker/docker-compose.yml
version: '3.8'

services:
  ai_server:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    runtime: nvidia
    environment:
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=all
      - PYTHONUNBUFFERED=1
      - AI_DATA_PATH=${AI_DATA_PATH}
      - MODEL_CACHE_PATH=${MODEL_CACHE_PATH}
      - API_SECRET_KEY=${API_SECRET_KEY}
    volumes:
      - ../:/app
      - ai_data:/data
      - model_cache:/app/model_cache
    ports:
      - "${API_PORT:-8000}:8000"  # FastAPI
      - "6006:6006"  # TensorBoard
    depends_on:
      - redis
      - prometheus
      - postgres
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "python3", "-c", "import torch; assert torch.cuda.is_available()"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: python3 -m uvicorn src.api.server:app --host 0.0.0.0 --port 8000 --reload

  redis:
    image: redis:alpine
    command: redis-server --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  prometheus:
    image: prom/prometheus:latest
    environment:
      - PROMETHEUS_BASIC_AUTH_USER=${PROMETHEUS_BASIC_AUTH_USER}
      - PROMETHEUS_BASIC_AUTH_PASS=${PROMETHEUS_BASIC_AUTH_PASS}
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.authentication.enabled=true'
      - '--web.authentication.type=basic'
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_USERS_DEFAULT_THEME=dark
      - GF_AUTH_ANONYMOUS_ENABLED=false
    volumes:
      - grafana_data:/var/lib/grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    depends_on:
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  ai_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${AI_DATA_PATH}
  model_cache:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${MODEL_CACHE_PATH}
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  postgres_data:
    driver: local